#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <sstream>
#include <map>
#include <queue>
#include "SaleTree.h"
#include "CircularList.h"

using namespace std;

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞ –ø—Ä–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
struct TreeNode {
    int key;
    string indices;
    TreeNode* left;
    TreeNode* right;
    TreeNode* parent;

    TreeNode(int k, const string& idx) : key(k), indices(idx), left(nullptr), right(nullptr), parent(nullptr) {}
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö SaleTree
TreeNode* buildTreeFromSaleTree(const SaleTree& tree) {
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ä–µ–≤–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if (!tree.exportToFile("temp_tree_structure.txt")) {
        return nullptr;
    }

    // –ß–∏—Ç–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞
    ifstream file("temp_tree_structure.txt");
    if (!file.is_open()) {
        return nullptr;
    }

    vector<pair<int, string>> preOrderData;
    string line;
    while (getline(file, line)) {
        if (line.empty()) continue;

        size_t colonPos = line.find(':');
        if (colonPos != string::npos) {
            int key = stoi(line.substr(0, colonPos));
            string indices = line.substr(colonPos + 2);
            preOrderData.push_back({key, indices});
        }
    }
    file.close();
    remove("temp_tree_structure.txt");

    if (preOrderData.empty()) {
        return nullptr;
    }

    // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã
    map<int, TreeNode*> nodeMap;
    for (const auto& data : preOrderData) {
        nodeMap[data.first] = new TreeNode(data.first, data.second);
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ BST —Å–≤–æ–π—Å—Ç–≤
    TreeNode* root = nodeMap[preOrderData[0].first];

    for (size_t i = 1; i < preOrderData.size(); i++) {
        int key = preOrderData[i].first;
        TreeNode* newNode = nodeMap[key];
        TreeNode* current = root;

        while (true) {
            if (key < current->key) {
                if (!current->left) {
                    current->left = newNode;
                    newNode->parent = current;
                    break;
                } else {
                    current = current->left;
                }
            } else {
                if (!current->right) {
                    current->right = newNode;
                    newNode->parent = current;
                    break;
                } else {
                    current = current->right;
                }
            }
        }
    }

    return root;
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –¥–µ—Ä–µ–≤–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–µ–¥–∫–æ–≤
void printTreeWithParents(TreeNode* node, const string& prefix, bool isLast, const vector<SaleEntry>& sales, bool isRoot = false) {
    if (!node) return;

    if (isRoot) {
        cout << "üå≥ –ö–û–†–ï–ù–¨: " << node->key << " [" << node->indices << "]" << endl;
    } else {
        cout << prefix;
        cout << (isLast ? "‚îî‚îÄ‚îÄ " : "‚îú‚îÄ‚îÄ ");

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ª–µ–≤—ã–π –∏–ª–∏ –ø—Ä–∞–≤—ã–π —Ä–µ–±–µ–Ω–æ–∫
        string childType = (node->parent && node->parent->left == node) ? "–õ–ï–í–´–ô" : "–ü–†–ê–í–´–ô";
        cout << childType << ": " << node->key << " [" << node->indices << "]";

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–∫–µ
        if (node->parent) {
            cout << " –ü–†–ï–î–û–ö " << node->parent->key;
        }
        cout << endl;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
    string detailPrefix = prefix;
    if (!isRoot) {
        detailPrefix += (isLast ? "    " : "‚îÇ   ");
    }
    cout << detailPrefix << "‚îî‚îÄ –ó–∞–ø–∏—Å–∏:" << endl;

    // –ü–∞—Ä—Å–∏–º –∏–Ω–¥–µ–∫—Å—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    stringstream ss(node->indices);
    string token;
    vector<int> indices;

    while (getline(ss, token, ' ')) {
        if (token == "->" || token.empty()) continue;
        try {
            indices.push_back(stoi(token));
        } catch (...) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        }
    }

    for (int idx : indices) {
        if (idx < sales.size()) {
            cout << detailPrefix << "   ‚Ä¢ –ó–∞–ø–∏—Å—å " << idx << ": "
                 << sales[idx].quantity << " —à—Ç., "
                 << sales[idx].cashier << ", "
                 << sales[idx].date << endl;
        }
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–µ—Ç–µ–π
    string childPrefix = prefix;
    if (!isRoot) {
        childPrefix += (isLast ? "    " : "‚îÇ   ");
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ—Ç–∏
    bool hasLeft = (node->left != nullptr);
    bool hasRight = (node->right != nullptr);

    // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–µ–π (—Å–Ω–∞—á–∞–ª–∞ –ª–µ–≤—ã–π, –ø–æ—Ç–æ–º –ø—Ä–∞–≤—ã–π)
    if (hasLeft && hasRight) {
        // –ï—Å—Ç—å –æ–±–∞ —Ä–µ–±–µ–Ω–∫–∞
        printTreeWithParents(node->left, childPrefix, false, sales);
        printTreeWithParents(node->right, childPrefix, true, sales);
    } else if (hasLeft) {
        // –¢–æ–ª—å–∫–æ –ª–µ–≤—ã–π —Ä–µ–±–µ–Ω–æ–∫
        printTreeWithParents(node->left, childPrefix, true, sales);
    } else if (hasRight) {
        // –¢–æ–ª—å–∫–æ –ø—Ä–∞–≤—ã–π —Ä–µ–±–µ–Ω–æ–∫
        printTreeWithParents(node->right, childPrefix, true, sales);
    }
}

// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–µ—Ä–µ–≤–∞
void deleteTree(TreeNode* node) {
    if (!node) return;
    deleteTree(node->left);
    deleteTree(node->right);
    delete node;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ AVL-–¥–µ—Ä–µ–≤–∞
void printBeautifulTree(const SaleTree& tree, const vector<SaleEntry>& sales) {
    cout << "\n‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n";
    cout << "‚îÉ                    –°–¢–†–£–ö–¢–£–†–ê AVL-–î–ï–†–ï–í–ê                  ‚îÉ\n";
    cout << "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n";

    TreeNode* root = buildTreeFromSaleTree(tree);
    if (!root) {
        cout << "\nüåø –î–µ—Ä–µ–≤–æ –ø—É—Å—Ç–æ–µ\n";
        return;
    }

    cout << "\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞ (—Ñ–æ—Ä–º–∞—Ç: –ü–æ–∑–∏—Ü–∏—è: –ê—Ä—Ç–∏–∫—É–ª [–∏–Ω–¥–µ–∫—Å—ã_–∑–∞–ø–∏—Å–µ–π] –ü–†–ï–î–û–ö –ø—Ä–µ–¥–æ–∫):\n";
    cout << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";

    printTreeWithParents(root, "", true, sales, true);

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    int nodeCount = 0;
    queue<TreeNode*> q;
    q.push(root);
    while (!q.empty()) {
        TreeNode* current = q.front();
        q.pop();
        nodeCount++;
        if (current->left) q.push(current->left);
        if (current->right) q.push(current->right);
    }

    cout << "\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ä–µ–≤–∞:\n";
    cout << "   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤: " << nodeCount << "\n";
    cout << "   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: " << sales.size() << "\n";

    deleteTree(root);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
void createTestFile() {
    ofstream file("test_sales.txt");
    file << "1001 5 –ò–≤–∞–Ω–æ–≤;15 —è–Ω–≤–∞—Ä—å 2024\n";
    file << "1002 3 –ü–µ—Ç—Ä–æ–≤;16 —è–Ω–≤–∞—Ä—å 2024\n";
    file << "1001 2 –°–∏–¥–æ—Ä–æ–≤;17 —è–Ω–≤–∞—Ä—å 2024\n";
    file << "1003 7 –ò–≤–∞–Ω–æ–≤;18 —è–Ω–≤–∞—Ä—å 2024\n";
    file << "1002 1 –ö–æ–∑–ª–æ–≤;19 —è–Ω–≤–∞—Ä—å 2024\n";
    file << "1001 4 –ü–µ—Ç—Ä–æ–≤;20 —è–Ω–≤–∞—Ä—å 2024\n";
    file << "1004 8 –°–∏–¥–æ—Ä–æ–≤;21 —è–Ω–≤–∞—Ä—å 2024\n";
    file << "1003 2 –ò–≤–∞–Ω–æ–≤;22 —è–Ω–≤–∞—Ä—å 2024\n";
    file.close();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–¥–∞–∂
void printSales(const vector<SaleEntry>& sales) {
    cout << "\n‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n";
    cout << "‚îÉ                      –ó–ê–ü–ò–°–ò –ü–†–û–î–ê–ñ                       ‚îÉ\n";
    cout << "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n";
    for (size_t i = 0; i < sales.size(); i++) {
        cout << "üì¶ –ó–∞–ø–∏—Å—å " << i << ": –ê—Ä—Ç–∏–∫—É–ª " << sales[i].article
             << ", –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " << sales[i].quantity << " —à—Ç."
             << ", –ö–∞—Å—Å–∏—Ä: " << sales[i].cashier
             << ", –î–∞—Ç–∞: " << sales[i].date << endl;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
void searchAndPrint(const SaleTree& tree, const vector<SaleEntry>& sales, int article) {
    cout << "\nüîç –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ " << article << "\n";
    cout << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";

    CircularList indices = tree.search(article);

    if (indices.size() == 0) {
        cout << "‚ùå –ê—Ä—Ç–∏–∫—É–ª " << article << " –Ω–µ –Ω–∞–π–¥–µ–Ω.\n";
        return;
    }

    cout << "‚úÖ –ù–∞–π–¥–µ–Ω–æ " << indices.size() << " –∑–∞–ø–∏—Å–µ–π:\n";

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –¥–∞–Ω–Ω—ã–º –∞—Ä—Ç–∏–∫—É–ª–æ–º
    int count = 0;
    for (size_t j = 0; j < sales.size(); j++) {
        if (sales[j].article == article) {
            count++;
            cout << "   " << count << ". üì¶ –ó–∞–ø–∏—Å—å " << j << ": "
                 << sales[j].quantity << " —à—Ç., –∫–∞—Å—Å–∏—Ä "
                 << sales[j].cashier << ", –¥–∞—Ç–∞ "
                 << sales[j].date << "\n";
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
void interactiveTest(SaleTree& tree, vector<SaleEntry>& sales) {
    int choice;
    do {
        cout << "\n‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n";
        cout << "‚îÉ                   –ú–ï–ù–Æ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø                      ‚îÉ\n";
        cout << "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n";
        cout << "1. üå≥ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞\n";
        cout << "2. üîç –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É\n";
        cout << "3. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å\n";
        cout << "4. ‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n";
        cout << "5. üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–¥–∞–∂\n";
        cout << "6. üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ä–µ–≤–∞ –≤ —Ñ–∞–π–ª\n";
        cout << "7. üóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å –¥–µ—Ä–µ–≤–æ\n";
        cout << "0. üö™ –í—ã—Ö–æ–¥\n";
        cout << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
        cout << "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ";
        cin >> choice;

        switch (choice) {
            case 1:
                printBeautifulTree(tree, sales);
                break;

            case 2: {
                int article;
                cout << "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞: ";
                cin >> article;
                searchAndPrint(tree, sales, article);
                break;
            }

            case 3: {
                SaleEntry newEntry;
                cout << "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª: ";
                cin >> newEntry.article;
                cout << "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ";
                cin >> newEntry.quantity;
                cout << "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Å—Å–∏—Ä–∞: ";
                cin.ignore();
                getline(cin, newEntry.cashier);
                cout << "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É: ";
                getline(cin, newEntry.date);

                sales.push_back(newEntry);
                tree.add(newEntry.article, sales.size() - 1);
                cout << "‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º " << (sales.size() - 1) << endl;
                break;
            }

            case 4: {
                int article, index;
                cout << "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ";
                cin >> article;
                cout << "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –∑–∞–ø–∏—Å–∏ (-1 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö): ";
                cin >> index;
                tree.remove(article, index);
                cout << "‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.\n";
                break;
            }

            case 5:
                printSales(sales);
                break;

            case 6: {
                string filename;
                cout << "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: ";
                cin >> filename;
                if (tree.exportToFile(filename)) {
                    cout << "‚úÖ –î–µ—Ä–µ–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ñ–∞–π–ª " << filename << endl;
                } else {
                    cout << "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ —Ñ–∞–π–ª.\n";
                }
                break;
            }

            case 7:
                tree.clear();
                sales.clear();
                cout << "‚úÖ –î–µ—Ä–µ–≤–æ –∏ –∑–∞–ø–∏—Å–∏ –æ—á–∏—â–µ–Ω—ã.\n";
                break;

            case 0:
                cout << "üö™ –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n";
                break;

            default:
                cout << "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n";
        }
    } while (choice != 0);
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
void runAutomaticTests() {
    cout << "\n‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n";
    cout << "‚îÉ                  –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´                    ‚îÉ\n";
    cout << "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n";

    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    cout << "\nüß™ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n";
    SaleTree testTree;
    vector<SaleEntry> testSales;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    SaleEntry e1 = {1001, 5, "–ò–≤–∞–Ω–æ–≤", "15 —è–Ω–≤–∞—Ä—å 2024"};
    SaleEntry e2 = {1002, 3, "–ü–µ—Ç—Ä–æ–≤", "16 —è–Ω–≤–∞—Ä—å 2024"};
    SaleEntry e3 = {1001, 2, "–°–∏–¥–æ—Ä–æ–≤", "17 —è–Ω–≤–∞—Ä—å 2024"};

    testSales.push_back(e1);
    testSales.push_back(e2);
    testSales.push_back(e3);

    testTree.add(1001, 0);
    testTree.add(1002, 1);
    testTree.add(1001, 2);

    cout << "\n–î–µ—Ä–µ–≤–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n";
    testTree.print(cout);

    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫
    cout << "\nüß™ –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n";
    CircularList result1001 = testTree.search(1001);
    CircularList result1002 = testTree.search(1002);
    CircularList result9999 = testTree.search(9999);

    cout << "‚úÖ –ü–æ–∏—Å–∫ 1001: –Ω–∞–π–¥–µ–Ω–æ " << result1001.size() << " –∑–∞–ø–∏—Å–µ–π\n";
    cout << "‚úÖ –ü–æ–∏—Å–∫ 1002: –Ω–∞–π–¥–µ–Ω–æ " << result1002.size() << " –∑–∞–ø–∏—Å–µ–π\n";
    cout << "‚ùå –ü–æ–∏—Å–∫ 9999: –Ω–∞–π–¥–µ–Ω–æ " << result9999.size() << " –∑–∞–ø–∏—Å–µ–π\n";

    // –¢–µ—Å—Ç 3: –£–¥–∞–ª–µ–Ω–∏–µ
    cout << "\nüß™ –¢–µ—Å—Ç 3: –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n";
    testTree.remove(1001, 0);  // –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
    cout << "–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ 1001 —Å –∏–Ω–¥–µ–∫—Å–æ–º 0:\n";
    testTree.print(cout);

    testTree.remove(1002, -1); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º 1002
    cout << "–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π 1002:\n";
    testTree.print(cout);

    cout << "\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n";
}

int main() {
    system("chcp 65001");
    cout << "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n";
    cout << "‚îÉ                 –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ï–†–ï–í–ê –ü–†–û–î–ê–ñ               ‚îÉ\n";
    cout << "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n";

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    createTestFile();
    cout << "üìÅ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª 'test_sales.txt'\n";

    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    SaleTree tree;
    vector<SaleEntry> sales;

    cout << "\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞...\n";
    if (tree.importFromFile("test_sales.txt", sales)) {
        cout << "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: " << sales.size() << endl;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        printSales(sales);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞
        printBeautifulTree(tree, sales);

        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
        cout << "\n‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n";
        cout << "‚îÉ                   –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–ò–°–ö–ê                    ‚îÉ\n";
        cout << "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n";
        searchAndPrint(tree, sales, 1001);
        searchAndPrint(tree, sales, 1002);
        searchAndPrint(tree, sales, 1003);
        searchAndPrint(tree, sales, 1004);
        searchAndPrint(tree, sales, 9999); // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
        runAutomaticTests();

        // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        char choice;
        cout << "\n‚ùì –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/n): ";
        cin >> choice;
        if (choice == 'y' || choice == 'Y') {
            interactiveTest(tree, sales);
        }

    } else {
        cout << "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞!\n";
        return 1;
    }

    cout << "\nüèÅ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n";
    return 0;
}