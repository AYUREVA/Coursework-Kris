
Постановка задачи:
Реализация работы со справочниками заданной ПО с использованием заданных СД
Общие требования:
оконный интерфейс (среда разработки - любая) (вид верстки и расположение элементов для вызова операций - см. свой
вариант задания)
нельзя использовать универсальные классы-коллекции в System.Collections для реализации заданных СД
изначально справочники из текстовых файлов загружать в массивы, поиск в справочниках (в том числе и для формирования
отчета) не должен выполняться полным перебором (СД для ускорения поиска: БДП - идз 1.2, цепочки в БДП - идз 1.1, ХТ -
идз 2.3)
в интерфейсе отображать справочники и окно отладки для вывода СД (печать ХТ с выводом хеш-адреса первичной и
вторичной ХФ для открытой адресации, печать ХТ с цепочками, печать БДП (в том числе - цепочки в элементе, если по
заданию требуется дерево с цепочками))
Какой должен быть функционал:
Возможность задания в интерфейсе первоначального размера ХТ
Работа со справочниками:
- загрузка из текстового файла / сохранение в текстовый файл
- добавление (проверять целостность данных при добавлении)
- удаление (проверять целостность данных при удалении)
- поиск по заданным полям (выводить в интерфейсе количество шагов поиска)
- просмотр
Формирование отчета:
- (связующая задача поиска - выборка из двух справочников по заданным полям фильтра) (в отчете должны быть все поля 1 и
2 справочника)
Окно отладки (печать СД)


я долго его разбирал и вот моими словами что должно получиться:
Итак еще раз объясню задачу которую нам нужно сделать по курсовой работе, чтобы ты лучше понял что от тебя требуется. Так курсовая работа, у нас есть 2 справочника мы берём из этих 2 справочников строим массивы, добавляем все значения туда, потом из 1 справочника по нему мы мы строим хэш таблицу, где ключами будут артикулы, то почему мы ищем. далее строим такое же дерево для 2 справочника с этим же ключом(артикул). значения хэш таблицы это будут просто индексы массива, а чтобы получить значение мы должны обратиться к массиву. то же самое будет в дереве, мы в ноде(с ключом артикул) храним цепочку (динамический список (двусвязный кольцевой)), цепочка по хранит тоже только индексы массива только уже для справочника 2. Далее у нас есть несколько фильтров для каждого, фильтра мы строим отдельное дерево где ключом будет этот фильтр. пользователь может сам задавать какие фильтры ему нужны, например из трёх фильтров он может выбрать только один. После того как он выбрал фильтрацию, дерево фильтруется получается на выходе список подходящих элементов, если фильтров было несколько то мы эти списки должны произвести слияние и выбрать из этих нескольких списков те элементы, которые присутствуют во всех списках, получается удовлетворяет для всех фильтров.
Итак мы формируем отчет, деревья строятся после того как пользователь запустил программу. получается у нас эти 2 справочника считались и все деревья  и Таблица построились. деревья и таблица могут меняться, но только тогда когда меняется сам справочник, например пользователь добавили элемент, удалили элемент и вот тогда эти деревья и ХТ перестраиваются. 

напомню мой вариант:
ПО: Магазин
Справочник_1: Товары (Артикул, Название, Цена)
Справочник_2: Продажи (Артикул товара, Количество, Кассир, Дата продажи)
Поиск (Справочник_1, Справочник_2): Артикул
Формат даты: DD январь YYYY
верстка: 1 окно, горизонталь
элементы: MenuStrip
Отчёт: Товары проданные в заданный период с указанием количества и цены
Поля отчета: Продажи.Дата продажи (период) & Продажи.Количество & Товары.Цена
Список: динамический список (двусвязный кольцевой)
Дерево: АВЛ-дерево
ХТ: динамическая (статус 0/1/2), метод разрешения коллизий - открытая адресация (линейный, k = 1), хеш-функция - мультипликативная
